[gd_resource type="ShaderMaterial" load_steps=26 format=2]

[ext_resource path="res://assets/textures/[4K]Asphalt10/Asphalt10_col.jpg" type="Texture" id=1]
[ext_resource path="res://assets/textures/[4K]Asphalt10/Asphalt10_nrm.jpg" type="Texture" id=2]

[sub_resource type="VisualShaderNodeScalarConstant" id=1]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=2]

[sub_resource type="VisualShaderNodeScalarConstant" id=3]
constant = 1.0

[sub_resource type="VisualShaderNodeColorOp" id=4]

[sub_resource type="VisualShaderNodeVectorOp" id=5]

[sub_resource type="VisualShaderNodeExpression" id=6]
size = Vector2( 450, 307 )
expression = "c = (b-a)*fac+a;"

[sub_resource type="VisualShaderNodeColorConstant" id=7]
constant = Color( 0.498039, 0.498039, 1, 1 )

[sub_resource type="VisualShaderNodeExpression" id=8]
size = Vector2( 366, 334 )
expression = "rmap = (val-a)*(c-d)/(a-b)+c;"

[sub_resource type="VisualShaderNodeScalarConstant" id=9]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=10]

[sub_resource type="VisualShaderNodeTexture" id=11]
texture = ExtResource( 1 )
texture_type = 1

[sub_resource type="VisualShaderNodeScalarConstant" id=12]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=13]
constant = 0.3

[sub_resource type="VisualShaderNodeTexture" id=14]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeScalarConstant" id=15]

[sub_resource type="VisualShaderNodeScalarConstant" id=16]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=17]
constant = 0.7

[sub_resource type="OpenSimplexNoise" id=18]
octaves = 5
period = 92.4
persistence = 0.173

[sub_resource type="NoiseTexture" id=19]
seamless = true
noise = SubResource( 18 )

[sub_resource type="VisualShaderNodeTexture" id=20]
texture = SubResource( 19 )

[sub_resource type="VisualShaderNodeExpression" id=21]
size = Vector2( 366, 334 )
expression = "rmap = (val-a)*(c-d)/(a-b)+c;"

[sub_resource type="VisualShaderNodeScalarConstant" id=22]
constant = 0.3

[sub_resource type="VisualShader" id=23]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2 : hint_albedo;
uniform sampler2D tex_frg_7;
uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Scalar:6
	float n_out6p0 = 0.700000;

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, UV.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// Scalar:21
	float n_out21p0 = 0.300000;

// Scalar:18
	float n_out18p0 = 1.000000;

// Scalar:19
	float n_out19p0 = 0.000000;

// Scalar:20
	float n_out20p0 = 1.000000;

// Expression:17
	float n_out17p0;
	n_out17p0 = 0.0;
	{
		n_out17p0 = (dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333))-n_out21p0)*(n_out19p0-n_out20p0)/(n_out21p0-n_out18p0)+n_out19p0;
	}

// Scalar:5
	float n_out5p0 = 1.000000;

// Color:16
	vec3 n_out16p0 = vec3(0.498039, 0.498039, 1.000000);
	float n_out16p1 = 1.000000;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Scalar:9
	float n_out9p0 = 0.300000;

// Scalar:10
	float n_out10p0 = 1.000000;

// Scalar:11
	float n_out11p0 = 0.000000;

// Scalar:12
	float n_out12p0 = 1.000000;

// Expression:8
	float n_out8p0;
	n_out8p0 = 0.0;
	{
		n_out8p0 = (dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333))-n_out9p0)*(n_out11p0-n_out12p0)/(n_out9p0-n_out10p0)+n_out11p0;
	}

// Expression:15
	vec3 n_out15p0;
	n_out15p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out15p0 = (n_out3p0-n_out16p0)*n_out8p0+n_out16p0;
	}

// Output:0
	ALBEDO = n_out2p0;
	METALLIC = n_out6p0;
	ROUGHNESS = n_out17p0;
	SPECULAR = n_out5p0;
	NORMALMAP = n_out15p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 886.917, -341.942 )
nodes/fragment/0/position = Vector2( 1660, -340 )
nodes/fragment/2/node = SubResource( 11 )
nodes/fragment/2/position = Vector2( 1380, -640 )
nodes/fragment/3/node = SubResource( 14 )
nodes/fragment/3/position = Vector2( 60, 40 )
nodes/fragment/4/node = SubResource( 15 )
nodes/fragment/4/position = Vector2( 1240, -240 )
nodes/fragment/5/node = SubResource( 16 )
nodes/fragment/5/position = Vector2( 1240, -180 )
nodes/fragment/6/node = SubResource( 17 )
nodes/fragment/6/position = Vector2( 1240, -320 )
nodes/fragment/7/node = SubResource( 20 )
nodes/fragment/7/position = Vector2( -460, -700 )
nodes/fragment/8/node = SubResource( 21 )
nodes/fragment/8/position = Vector2( 100, -500 )
nodes/fragment/8/size = Vector2( 366, 334 )
nodes/fragment/8/input_ports = "0,0,val;1,0,a;2,0,b;3,0,c;4,0,d;"
nodes/fragment/8/output_ports = "0,0,rmap;"
nodes/fragment/8/expression = "rmap = (val-a)*(c-d)/(a-b)+c;"
nodes/fragment/9/node = SubResource( 22 )
nodes/fragment/9/position = Vector2( -200, -460 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -200, -380 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -320, -280 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -120, -260 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 872, -395.5 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 920, -520 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 680, -220 )
nodes/fragment/15/size = Vector2( 450, 307 )
nodes/fragment/15/input_ports = "0,1,a;1,1,b;2,0,fac;"
nodes/fragment/15/output_ports = "0,1,c;"
nodes/fragment/15/expression = "c = (b-a)*fac+a;"
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( 360, -100 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( 440, -900 )
nodes/fragment/17/size = Vector2( 366, 334 )
nodes/fragment/17/input_ports = "0,0,val;1,0,a;2,0,b;3,0,c;4,0,d;"
nodes/fragment/17/output_ports = "0,0,rmap;"
nodes/fragment/17/expression = "rmap = (val-a)*(c-d)/(a-b)+c;"
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( 80, -760 )
nodes/fragment/19/node = SubResource( 10 )
nodes/fragment/19/position = Vector2( -40, -660 )
nodes/fragment/20/node = SubResource( 12 )
nodes/fragment/20/position = Vector2( 20, -560 )
nodes/fragment/21/node = SubResource( 13 )
nodes/fragment/21/position = Vector2( 80, -840 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 4, 6, 0, 0, 2, 7, 0, 8, 0, 9, 0, 8, 1, 10, 0, 8, 2, 11, 0, 8, 3, 12, 0, 8, 4, 8, 0, 15, 2, 16, 0, 15, 0, 3, 0, 15, 1, 15, 0, 0, 8, 7, 0, 17, 0, 21, 0, 17, 1, 18, 0, 17, 2, 19, 0, 17, 3, 20, 0, 17, 4, 17, 0, 0, 3, 2, 0, 0, 0 )

[resource]
shader = SubResource( 23 )
